This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-03T21:19:48.193Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
cli_tool_for_todoist.egg-info/
  dependency_links.txt
  entry_points.txt
  PKG-INFO
  requires.txt
  SOURCES.txt
  top_level.txt
tests/
  test_cli.py
todoist_cli/
  commands/
    __init__.py
    add.py
    delete.py
    list_task.py
    sync.py
  models/
    __init__.py
    label.py
    project.py
    task.py
  utils/
    __init__.py
    cache.py
    config.py
    date_utils.py
  __init__.py
  cli.py
  client.py
  tempCodeRunnerFile.py
.gitignore
LICENSE
README.md
setup.py

================================================================
Repository Files
================================================================

================
File: cli_tool_for_todoist.egg-info/dependency_links.txt
================


================
File: cli_tool_for_todoist.egg-info/entry_points.txt
================
[console_scripts]
todo-add = todoist_cli.cli:main
todo-delete = todoist_cli.cli:main
todo-list = todoist_cli.cli:main
todo-sync = todoist_cli.cli:main

================
File: cli_tool_for_todoist.egg-info/PKG-INFO
================
Metadata-Version: 2.1
Name: cli-tool-for-todoist
Version: 0.1
Summary: A CLI tool for managing Todoist tasks
Author: Anshuman Agrawal
Author-email: asquare567@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
License-File: LICENSE

================
File: cli_tool_for_todoist.egg-info/requires.txt
================
requests

================
File: cli_tool_for_todoist.egg-info/SOURCES.txt
================
LICENSE
README.md
setup.py
cli_tool_for_todoist.egg-info/PKG-INFO
cli_tool_for_todoist.egg-info/SOURCES.txt
cli_tool_for_todoist.egg-info/dependency_links.txt
cli_tool_for_todoist.egg-info/entry_points.txt
cli_tool_for_todoist.egg-info/requires.txt
cli_tool_for_todoist.egg-info/top_level.txt
todoist_cli/__init__.py
todoist_cli/cli.py
todoist_cli/client.py
todoist_cli/tempCodeRunnerFile.py
todoist_cli/commands/__init__.py
todoist_cli/commands/add.py
todoist_cli/commands/delete.py
todoist_cli/commands/list_task.py
todoist_cli/commands/sync.py
todoist_cli/models/__init__.py
todoist_cli/models/label.py
todoist_cli/models/project.py
todoist_cli/models/task.py
todoist_cli/utils/__init__.py
todoist_cli/utils/cache.py
todoist_cli/utils/config.py
todoist_cli/utils/date_utils.py

================
File: cli_tool_for_todoist.egg-info/top_level.txt
================
todoist_cli

================
File: tests/test_cli.py
================
# tests/test_cli.py
import unittest
from unittest.mock import patch
from todoist_cli.client import TodoistClient

class TestTodoistCLI(unittest.TestCase):
    @patch("client.requests.request")
    def test_add_task(self, mock_request):
        # Mock response for add task
        mock_request.return_value.status_code = 200
        mock_request.return_value.json.return_value = {
            "id": "12345",
            "content": "Test Task"
        }
        client = TodoistClient("fake_api_token")
        task = client.add_task("Test Task", due_string="tomorrow", priority=2)
        self.assertEqual(task["content"], "Test Task")
        self.assertEqual(task["id"], "12345")

    @patch("client.requests.request")
    def test_delete_task(self, mock_request):
        # Mock response for delete task
        mock_request.return_value.status_code = 204
        client = TodoistClient("fake_api_token")
        result = client.delete_task("12345")
        self.assertIsNone(result)

    @patch("client.requests.request")
    def test_list_tasks(self, mock_request):
        # Mock response for list tasks
        mock_request.return_value.status_code = 200
        mock_request.return_value.json.return_value = [
            {"id": "12345", "content": "Task 1"},
            {"id": "67890", "content": "Task 2"}
        ]
        client = TodoistClient("fake_api_token")
        tasks = client.list_tasks()
        self.assertEqual(len(tasks), 2)
        self.assertEqual(tasks[0]["content"], "Task 1")

if __name__ == "__main__":
    unittest.main()

================
File: todoist_cli/commands/__init__.py
================
from .add import add_task
from .delete import delete_task
from .list_task import list_tasks
from .sync import sync_tasks

__all__ = ["add_task", "delete_task", "list_tasks", "sync_tasks"]

================
File: todoist_cli/commands/add.py
================
# commands/add.py
from client import TodoistClient

def add_task(api_token, content, due_string=None, priority=1):
    client = TodoistClient(api_token)
    task = client.add_task(content, due_string, priority)
    if task:
        print(f"Task '{task['content']}' added with ID: {task['id']}")
    else:
        print("Failed to add task.")

================
File: todoist_cli/commands/delete.py
================
# commands/delete.py
from client import TodoistClient

def delete_task(api_token, task_id):
    client = TodoistClient(api_token)
    if client.delete_task(task_id):
        print(f"Task with ID '{task_id}' deleted successfully.")
    else:
        print(f"Failed to delete task with ID '{task_id}'.")

================
File: todoist_cli/commands/list_task.py
================
# commands/list.py
from client import TodoistClient
from models.task import Task

def list_tasks(api_token, filter=None):
    client = TodoistClient(api_token)
    tasks_data = client.list_tasks(filter)
    if tasks_data:
        tasks = [Task.from_dict(task_data) for task_data in tasks_data]
        for task in tasks:
            print(task)
    else:
        print("No tasks found or failed to retrieve tasks.")

================
File: todoist_cli/commands/sync.py
================
# commands/sync.py
from client import TodoistClient
from models.task import Task

def sync_tasks(api_token):
    client = TodoistClient(api_token)
    tasks_data = client.sync_tasks()
    if tasks_data:
        tasks = [Task.from_dict(task_data) for task_data in tasks_data]
        print("Tasks synchronized:")
        for task in tasks:
            print(task)
    else:
        print("Failed to sync tasks.")

================
File: todoist_cli/models/__init__.py
================
from .task import Task
from .project import Project
from .label import Label

__all__ = ["Task", "Project", "Label"]

================
File: todoist_cli/models/label.py
================
# models/label.py

class Label:
    def __init__(self, id, name, color=None):
        self.id = id
        self.name = name
        self.color = color

    @classmethod
    def from_dict(cls, data):
        return cls(
            id=data.get("id"),
            name=data.get("name"),
            color=data.get("color")
        )

    def __repr__(self):
        return f"<Label(id={self.id}, name='{self.name}', color='{self.color}')>"

================
File: todoist_cli/models/project.py
================
# models/project.py

class Project:
    def __init__(self, id, name, color=None):
        self.id = id
        self.name = name
        self.color = color

    @classmethod
    def from_dict(cls, data):
        return cls(
            id=data.get("id"),
            name=data.get("name"),
            color=data.get("color")
        )

    def __repr__(self):
        return f"<Project(id={self.id}, name='{self.name}', color='{self.color}')>"

================
File: todoist_cli/models/task.py
================
# models/task.py

class Task:
    def __init__(self, id, content, due_date=None, priority=1):
        self.id = id
        self.content = content
        self.due_date = due_date
        self.priority = priority

    @classmethod
    def from_dict(cls, data):
        return cls(
            id=data.get("id"),
            content=data.get("content"),
            due_date=data.get("due") and data["due"].get("string"),
            priority=data.get("priority", 1)
        )

    def __repr__(self):
        return f"<Task(id={self.id}, content='{self.content}', due_date='{self.due_date}', priority={self.priority})>"

================
File: todoist_cli/utils/__init__.py
================
from .date_utils import format_date
from .config import get_api_token
from .cache import load_cache, save_cache

__all__ = ["format_date", "get_api_token", "load_cache", "save_cache"]

================
File: todoist_cli/utils/cache.py
================
# utils/cache.py
import json
import os

CACHE_FILE = "todoist_cache.json"

def load_cache():
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, "r") as f:
            return json.load(f)
    return {}

def save_cache(data):
    with open(CACHE_FILE, "w") as f:
        json.dump(data, f, indent=4)

================
File: todoist_cli/utils/config.py
================
# utils/config.py
import os

def get_api_token():
    api_token = os.getenv("TODOIST_API_TOKEN")
    if not api_token:
        raise EnvironmentError("TODOIST_API_TOKEN not set in environment variables.")
    return api_token

================
File: todoist_cli/utils/date_utils.py
================
# utils/date_utils.py
from datetime import datetime

def format_date(date_string):
    """
    Convert a date string to a human-readable format.
    """
    try:
        date_obj = datetime.strptime(date_string, "%Y-%m-%dT%H:%M:%SZ")
        return date_obj.strftime("%Y-%m-%d %H:%M")
    except ValueError:
        return date_string

================
File: todoist_cli/__init__.py
================
__version__ = "0.1.0"

================
File: todoist_cli/cli.py
================
import argparse
import os
import sys
from commands import add, delete, list_task, sync
from dotenv import load_dotenv, set_key

load_dotenv()

API_TOKEN_ENV_VAR = "TODOIST_API_TOKEN"
ENV_FILE = ".env"

def main():
    # Ensure API token is set
    api_token = os.getenv(API_TOKEN_ENV_VAR)
    while not api_token:
        api_token = input(f"Please enter your {API_TOKEN_ENV_VAR}: ")
        
        with open(ENV_FILE, 'a') as env_file:
            set_key(ENV_FILE, API_TOKEN_ENV_VAR, api_token)
    
    # Create the main parser
    parser = argparse.ArgumentParser(prog="todo", description="Todoist CLI Tool")
    subparsers = parser.add_subparsers(dest="command")

    # Add task
    parser_add = subparsers.add_parser("add", help="Add a new task")
    parser_add.add_argument("content", help="Task content")
    parser_add.add_argument("--due", help="Due date")
    parser_add.add_argument("--priority", type=int, choices=[1, 2, 3, 4], help="Priority level")

    # Delete task
    parser_delete = subparsers.add_parser("delete", help="Delete a task")
    parser_delete.add_argument("task_id", help="ID of the task")

    # List tasks
    parser_list = subparsers.add_parser("list", help="List tasks")
    parser_list.add_argument("--filter", help="Filter tasks")

    # Sync tasks
    parser_sync = subparsers.add_parser("sync", help="Sync tasks")

    # Parse the arguments
    args = parser.parse_args()

    # Dispatch the command
    if args.command == "add":
        add.add_task(api_token, args.content, args.due, args.priority)
    elif args.command == "delete":
        delete.delete_task(api_token, args.task_id)
    elif args.command == "list":
        list_task.list_tasks(api_token, args.filter)
    elif args.command == "sync":
        sync.sync_tasks(api_token)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()

================
File: todoist_cli/client.py
================
# client.py
import requests
from requests.exceptions import HTTPError

class TodoistClient:
    BASE_URL = "https://api.todoist.com/rest/v1/"

    def __init__(self, api_token):
        self.api_token = api_token
        self.headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Content-Type": "application/json"
        }

    def _request(self, endpoint, method="GET", data=None, params=None):
        url = self.BASE_URL + endpoint
        try:
            response = requests.request(method, url, headers=self.headers, json=data, params=params)
            response.raise_for_status()
            if response.content:
                return response.json()
            return None
        except HTTPError as http_err:
            print(f"HTTP error occurred: {http_err}")
        except Exception as err:
            print(f"An error occurred: {err}")

    def add_task(self, content, due_string=None, priority=1):
        """
        Add a new task to Todoist.
        """
        task_data = {
            "content": content,
            "due_string": due_string,
            "priority": priority
        }
        return self._request("tasks", method="POST", data=task_data)

    def delete_task(self, task_id):
        """
        Delete a task by ID.
        """
        return self._request(f"tasks/{task_id}", method="DELETE")

    def list_tasks(self, filter=None):
        """
        Retrieve all tasks, optionally filtered.
        """
        params = {"filter": filter} if filter else {}
        return self._request("tasks", method="GET", params=params)

    def sync_tasks(self):
        """
        Sync tasks with Todoist (useful if local caching is used).
        """
        # For simplicity, this function just calls list_tasks in this example,
        # but it can be extended to handle local caching if desired.
        return self.list_tasks()

================
File: todoist_cli/tempCodeRunnerFile.py
================
parser_sync = subparsers.add_parser("sync", help="Sync tasks")

================
File: .gitignore
================
.env

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Anshuman

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: README.md
================
# Todoist CLI Tool

A simple command-line interface (CLI) tool for managing Todoist tasks. With this tool, you can easily add, delete, list, and sync your tasks from the command line.

## Features

- Add tasks with optional due dates and priority levels.
- Delete tasks by ID.
- List tasks with filtering options.
- Sync tasks with your Todoist account.

## Installation

To install the Todoist CLI, you need Python 3.6 or later. You can install it via pip:

```bash
pip install todoist-cli
```

## Usage

After installation, you can use the following commands in your terminal:

### Add a Task

```bash
todo-add "Task description" --due "2024-11-05" --priority 2
```

### Delete a Task

```bash
todo-delete <task_id>
```

### List Tasks

```bash
todo-list --filter "today"
```

### Sync Tasks

```bash
todo-sync
```

## Command Options

- **todo-add**
  - `content`: The content of the task (required).
  - `--due`: Optional due date for the task.
  - `--priority`: Optional priority level (1-4).

- **todo-delete**
  - `task_id`: The ID of the task you want to delete (required).

- **todo-list**
  - `--filter`: Optional filter to show specific tasks.

- **todo-sync**
  - Syncs local tasks with your Todoist account.

## Contributing

Contributions are welcome! To contribute to this project, please follow these steps:

1. Fork the repository.
2. Create a new branch for your feature or bug fix.
3. Make your changes and commit them.
4. Push your changes to your forked repository.
5. Submit a pull request describing your changes.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## Acknowledgments

- This project uses the [Todoist API](https://developer.todoist.com/) to manage tasks.

## Contact

For questions or suggestions, feel free to reach out to the author:

- Name: Anshuman Agrawal
- Email: asquare567@gmail.com
- Website: [asquare.site](https://www.asquare.site)

---

Enjoy managing your tasks with Todoist CLI!

================
File: setup.py
================
from setuptools import setup, find_packages

setup(
    name="cli_tool_for_todoist",
    version="0.1",
    description="A CLI tool for managing Todoist tasks",
    author="Anshuman Agrawal",
    author_email="asquare567@gmail.com",
    packages=find_packages(),
    install_requires=["requests"],
    entry_points={
        "console_scripts": [
            "todo-add=todoist_cli.cli:main",
            "todo-delete=todoist_cli.cli:main",
            "todo-list=todoist_cli.cli:main",
            "todo-sync=todoist_cli.cli:main",
        ],
    },
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
    ],
    python_requires=">=3.6",
)
